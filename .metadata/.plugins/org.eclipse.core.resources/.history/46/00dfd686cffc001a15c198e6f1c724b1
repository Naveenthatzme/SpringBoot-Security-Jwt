package com.app.jwtUtil;

import java.util.Base64;
import java.util.Date;
import java.util.concurrent.TimeUnit;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

@Component
public class JwtUtil {

	@Value("${app.secret}")
	private String secret;

	//6.validate user,tokenexp

	public boolean validatetoken(String token,String username) {

		String tokenuser=getusername(token);
		//user must be matching  and token must be expiared
		return token.equals(username) && !istokenexpire(token);
	}



	//5.token exp check

	public boolean istokenexpire(String token)
	{

		return expdate(token).before(new Date(System.currentTimeMillis()));
	}


	//4.read exp date
	public Date expdate(String token) {

		return getclaim(token).getExpiration();
	}



	//3.read username
	public String getusername(String token) {

		return getclaim(token).getSubject();
	}


	//2.read token

	public Claims getclaim(String token) {

		return Jwts.parser().setSigningKey(Base64.getEncoder().encode(secret.getBytes()))
				.parseClaimsJws(token)
				.getBody();
	}


	//1.generate token

	public String generatetoken(String subject) {

		return Jwts.builder()
				.setSubject(subject) 
				.setIssuer("NaveeenIT")
				.setIssuedAt(new Date(System.currentTimeMillis()))
				.setExpiration(new Date(System.currentTimeMillis()+TimeUnit.MINUTES.toMillis(10)))
				.signWith(SignatureAlgorithm.HS256, Base64.getEncoder().encode(secret.getBytes()))
				.compact();
	}




}
